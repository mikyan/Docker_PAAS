
#===== MySQL settings =====#
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://49.233.185.231:3306/Paas?useUnicode=true&characterEncoding=utf-8&useSSL=true
spring.datasource.username=root
spring.datasource.password=ubuntu0426,
#spring.datasource.url=jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf-8&useSSL=true
#spring.datasource.username=root
#spring.datasource.password=root

#=====   MP settings =====#
#Mapper路径
# 如果是放在src/main/java目录下 classpath:/com/yourpackage/*/mapper/*Mapper.xml
# 如果是放在resource目录 classpath:/mapper/*Mapper.xml
mybatis-plus.mapper-locations=/mapper/*Mapper.xml
#实体、枚举扫描，多个package用逗号或者分号分隔
mybatis-plus.type-aliases-package=cn.mikyan.paas.domain.entity
mybatis-plus.type-enums-package= cn.mikyan.paas.constant.enums
#主键类型  0="数据库ID自增", 1="用户输入ID",2="全局唯一ID (数字类型唯一ID)", 3="全局唯一ID
#mybatis-plus.global-config.id-type= 1
#字段策略 0="忽略判断",1="非 NULL 判断"),2="非空判断"
mybatis-plus.global-config.field-strategy= 1
#驼峰下划线转换
mybatis-plus.global-config.db-column-underline= true
#刷新mapper 调试神器
mybatis-plus.global-config.refresh-mapper= true
#数据库大写下划线转换
#mybatis-plus.global-config.capital-mode= true
#配置返回数据库(column下划线命名&&返回java实体是驼峰命名)，自动匹配无需as（没开启这个，SQL需要写as： select user_id as userId）
mybatis-plus.configuration.map-underscore-to-camel-case= true
mybatis-plus.configuration.cache-enabled= false

#===== Upload settings =====#
spring.servlet.multipart.max-request-size=100MB
spring.servlet.multipart.max-file-size=100MB

#===== LogBack settings =====#
#Session中验证码相关key
#多彩输出
spring.output.ansi.enabled=detect
#输出日志到文件
logging.file=./logs/paas-logs.log
#级别控制（前面为扫描包名，后面参数：TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF）
logging.level.jit.wxs.breed.*=warn

#===== Redis settings =====#
# 单机版配置
#redis.standalone.host=192.168.100.188
#redis.standalone.port=6379
#redis.standalone.password=Jitwxs
# 集群版配置
redis.cluster.01.host=192.168.100.198
redis.cluster.01.port=9001
redis.cluster.02.host=192.168.100.198
redis.cluster.02.port=9002
redis.cluster.03.host=192.168.100.196
redis.cluster.03.port=9001
redis.cluster.04.host=192.168.100.196
redis.cluster.04.port=9002
redis.cluster.05.host=192.168.100.197
redis.cluster.05.port=9001
redis.cluster.06.host=192.168.100.197
redis.cluster.06.port=9002

#token在redis中key
redis.token.key=sys_token
#token有效期，单位；小时
token.expire=6
#用户登录信息在redis中key
redis.login.key=sys_login
#用户角色在redis中key
redis.role.key=sys_role
#角色权限在redis中key
redis.role-right.key=sys_role_right
#权限在redis中key
redis.right.key=sys_right
#用户项目在redis中key
redis.project.key=sys_project
#注册邮件token在redis中key
redis.register.email.key=register_email
#注册邮件token的过期时间【单位s】:24小时
redis.register.email.expire=86400
#本地镜像在redis中的key
redis.local-image.key=sys_image
#用户服务在redis中的key
redis.user-service.ley=user_service
#容器名再redis中的key
redis.container-name.key=container_name
#数据卷在redis中key
redis.volumes.key=sys_volumes
#仓储镜像在redis中key
redis.repository.image.key=repository_image
#容器实时监控在redis中key前缀
redis.monitor-actual.prefix=monitor_actual:
#容器24小时监控在redis中key前缀
redis.monitor-day.prefix=monitor_today:
#容器7日监控在redis中key前缀
redis.monitor-week.prefix=monitor_week:

#===== Nginx settings =====#
nginx.server=http://192.168.100.29:8888

#===== Docker settings =====#

# Docker 宿主机信息
docker.server.address=10.251.253.69
docker.server.port=2375
docker.server.url=http://${docker.server.address}:${docker.server.port}
# Docker Swarm Manager 节点
docker.swarm.manager.address=10.251.253.69
docker.swarm.manager.port=2375
docker.swarm.manager.url=http://${docker.swarm.manager.address}:${docker.swarm.manager.port}

#本机IP
server.ip=127.0.0.1
server.port=9999
server.addr=http://${server.ip}:${server.port}
#服务器Socket通信端口
file.socket.port=8899